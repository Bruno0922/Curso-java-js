/*
document.getElementById("text").innerHTML="Primeiro texto <b> JS </b>!";
alert(5+15);


var pote = "Bombom";
alert(pote);

var a = 1;
var b = 2;
var c = 3;
var d = (a+b+c);
alert(d);


var nome, sobrenome,nomeCompleto;
nome = "Bruno";
sobrenome = "Concei√ß√£o";
nomeCompleto = nome + " " + sobrenome;

document.getElementById("text").innerHTML= nomeCompleto;
*/

/*üîπ var

Escopo: Fun√ß√£o (ou global, se declarada fora de fun√ß√£o).

Reatribui√ß√£o: Pode ser reatribu√≠da.

Redeclara√ß√£o: Pode ser redeclarada no mesmo escopo (isso pode causar bugs).

Hoisting: Sofre hoisting (√© "elevada" para o topo, mas fica com valor undefined at√© ser inicializada).

‚ö†Ô∏è Hoje em dia, √© pouco usado porque pode gerar comportamentos inesperados.

EXEMPLO:

var x = 10;
var x = 20; // permitido
console.log(x); // 20


üîπ let
Escopo: Bloco ({ }), mais restrito e seguro.

Reatribui√ß√£o: Pode ser reatribu√≠da.

Redeclara√ß√£o: ‚ùå N√£o pode ser redeclarada no mesmo escopo.

Hoisting: Tamb√©m sofre hoisting, mas n√£o pode ser usada antes de ser declarada (gera erro de refer√™ncia).

Exemplo:

let y = 10;
y = 15; // permitido
// let y = 20; ‚ùå n√£o permitido no mesmo escopo
console.log(y); // 15





const z = 30;
// z = 40; ‚ùå n√£o permitido

const arr = [1, 2, 3,4];
arr.push(5); // ‚úÖ permitido
console.log(arr); // [1, 2, 3, 4]

*/

/*
üìå Operadores em JavaScript

S√£o s√≠mbolos usados para realizar opera√ß√µes. 
Categorias principais:

1. Aritm√©ticos (matem√°ticos) ‚Üí +, -, *, /, % 
2. Atribui√ß√£o (valor para vari√°vel) ‚Üí =, +=, -=, *=, /= 
3. Sequ√™ncia (concatena√ß√£o de strings) ‚Üí +
4. Compara√ß√£o (comparar valores) ‚Üí ==, ===, !=, <, >, <=, >=
5. Condicional (tern√°rio) ‚Üí condi√ß√£o ? valor1 : valor2
6. L√≥gicos ‚Üí &&, ||, !


// ==========================
// Operadores Aritm√©ticos
// ==========================
let valor1 = 5;
let valor2 = 2;
let total = valor1 + valor2;

console.log("Soma:", total); // 7

// Exemplos pr√°ticos:
// 1. Calculadora simples
// 2. Pre√ßo total de produtos
// 3. M√©dia de notas


// ==========================
// Operador de Pr√©-incremento
// ==========================
valor1 = 5;
total = ++valor1;

console.log("Pr√©-incremento:", total); // 6
console.log("Valor1 atualizado:", valor1); // 6

// Exemplos pr√°ticos:
// 1. Contadores autom√°ticos
// 2. Controle de tentativas
// 3. Percorrer arrays


// ==========================
// Operadores de Atribui√ß√£o
// ==========================
valor1 = 5;
valor2 = 2;

valor1 += valor2; // equivalente a valor1 = valor1 + valor2
console.log("Atribui√ß√£o (+=):", valor1); // 7

// Exemplos pr√°ticos:
// 1. Acumular pontos em jogo
// 2. Somar valores no carrinho
// 3. Contador em loops


// ==========================
// Operadores de Sequ√™ncia (Concatena√ß√£o)
// ==========================
let nome = "Bruno ";
let sobrenome = "Souza";

let nomeCompleto = nome + sobrenome;
console.log("Concatena√ß√£o:", nomeCompleto); // Bruno Souza

// Exemplos pr√°ticos:
// 1. Mensagens de boas-vindas
// 2. Frases din√¢micas
// 3. Exibir informa√ß√µes em p√°ginas


// ==========================
// Operadores de Compara√ß√£o
// ==========================
valor1 = 8;
valor2 = 10;

console.log("== :", valor1 == valor2);   // false
console.log("=== :", valor1 === valor2); // false
console.log("!= :", valor1 != valor2);   // true
console.log("< :", valor1 < valor2);     // true
console.log("> :", valor1 > valor2);     // false

// Exemplos pr√°ticos:
// 1. Verificar igualdade ou diferen√ßa
// 2. Condi√ß√µes de maior/menor
// 3. Validar tipos de dados


// ==========================
// Operador Tern√°rio
// ==========================
let idade = 18;
let eleitor = (idade < 18) ? "N√£o eleitor" : "Sim, eleitor";

console.log(`Idade: ${idade} ‚Üí ${eleitor}`);

// Exemplos pr√°ticos:
// 1. Verificar permiss√£o de acesso
// 2. Mensagens din√¢micas
// 3. Simplifica√ß√£o de if/else


// ==========================
// Operadores L√≥gicos
// ==========================
idade = 65;

console.log("&& :", (idade > 60 && idade < 70));  // true
console.log("|| :", (idade === 65 || idade === 70)); // true
console.log("!  :", !(idade === 65)); // false

// Exemplos pr√°ticos:
// 1. Valida√ß√µes m√∫ltiplas
// 2. Regras de acesso
// 3. Nega√ß√£o de condi√ß√µes
*/

/*FUN√á√ïES
uma fun√ß√£o JavaScript √© um bloco de codigo projetado para executar uma
tarefa especifica

√© como uma pequena "Fabrica" onde voc√™ fa uma entrada e ele te d√° uma sa√≠da.

pode ser encarado como "mini-programas" projetados para fazer uma tarefa que vai contruibuir para todo codigo.

Uma fun√ß√£o JavasScript √© executada quando "Algo" a invoca (chama - a)
*/

//Cria√ß√£o de uma fun√ß√£o

//SOMA
function soma(valor1, valor2){
    return valor1 + valor2;
}
document.getElementById("text").innerHTML = soma(10,10); // return esse valor no HTML

//Cota√ß√£o do dolar
function realcontacao(real,cotacao){
    return real * cotacao;
}

var total = realcontacao(10,5.08);
alert (total);


//Bot√£o animado com jun√ß√£o no HTML
function alertaHello(){
    alert("Ola Pessoal");
}

//Para Celsius
function paracelsius(valorfahrenheit){
    return (5/9) * (valorfahrenheit - 32);

}

var x =paracelsius(77);

alert("A temperatura √© de " + x + " graus celsius");

