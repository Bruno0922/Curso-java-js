/*
document.getElementById("text").innerHTML="Primeiro texto <b> JS </b>!";
alert(5+15);


var pote = "Bombom";
alert(pote);

var a = 1;
var b = 2;
var c = 3;
var d = (a+b+c);
alert(d);


var nome, sobrenome,nomeCompleto;
nome = "Bruno";
sobrenome = "Concei√ß√£o";
nomeCompleto = nome + " " + sobrenome;

document.getElementById("text").innerHTML= nomeCompleto;
*/

/*üîπ var

Escopo: Fun√ß√£o (ou global, se declarada fora de fun√ß√£o).

Reatribui√ß√£o: Pode ser reatribu√≠da.

Redeclara√ß√£o: Pode ser redeclarada no mesmo escopo (isso pode causar bugs).

Hoisting: Sofre hoisting (√© "elevada" para o topo, mas fica com valor undefined at√© ser inicializada).

‚ö†Ô∏è Hoje em dia, √© pouco usado porque pode gerar comportamentos inesperados.

EXEMPLO:

var x = 10;
var x = 20; // permitido
console.log(x); // 20


üîπ let
Escopo: Bloco ({ }), mais restrito e seguro.

Reatribui√ß√£o: Pode ser reatribu√≠da.

Redeclara√ß√£o: ‚ùå N√£o pode ser redeclarada no mesmo escopo.

Hoisting: Tamb√©m sofre hoisting, mas n√£o pode ser usada antes de ser declarada (gera erro de refer√™ncia).

Exemplo:

let y = 10;
y = 15; // permitido
// let y = 20; ‚ùå n√£o permitido no mesmo escopo
console.log(y); // 15





const z = 30;
// z = 40; ‚ùå n√£o permitido

const arr = [1, 2, 3,4];
arr.push(5); // ‚úÖ permitido
console.log(arr); // [1, 2, 3, 4]

*/